pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE_NAME = 'debabrata013/ai-notes-web'
        DOCKER_TAG = "${BUILD_NUMBER}"
        LATEST_TAG = 'latest'
        FRONTEND_DIR = 'frontend'
        // Set PATH to include Homebrew binaries
        PATH = "/opt/homebrew/bin:/usr/local/bin:${env.PATH}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Environment Info') {
            steps {
                echo 'Displaying environment information...'
                sh '''
                    echo "PATH: $PATH"
                    echo "Which node:"
                    which node || echo "Node not found in PATH"
                    echo "Which npm:"
                    which npm || echo "NPM not found in PATH"
                    echo "Node.js version:"
                    node --version || echo "Node.js not accessible"
                    echo "NPM version:"
                    npm --version || echo "NPM not accessible"
                    echo "Docker version:"
                    docker --version || echo "Docker not found"
                    echo "Build Number: ${BUILD_NUMBER}"
                    echo "Branch: ${BRANCH_NAME}"
                    echo "Working Directory:"
                    pwd
                    ls -la
                '''
            }
        }
        
        stage('Navigate to Frontend') {
            steps {
                echo 'Navigating to frontend directory...'
                dir("${FRONTEND_DIR}") {
                    sh '''
                        echo "Current directory:"
                        pwd
                        echo "Directory contents:"
                        ls -la
                        echo "Package.json exists:"
                        test -f package.json && echo "Yes" || echo "No"
                    '''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing Node.js dependencies...'
                dir("${FRONTEND_DIR}") {
                    sh '''
                        echo "Installing dependencies with npm ci..."
                        npm ci
                    '''
                }
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Building React application...'
                dir("${FRONTEND_DIR}") {
                    sh '''
                        echo "Building React app..."
                        npm run build
                        echo "Build completed, checking dist folder:"
                        ls -la dist/ || echo "Dist folder not found"
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir("${FRONTEND_DIR}") {
                    script {
                        try {
                            // Build Docker image with build number tag
                            def dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_TAG}")
                            
                            // Tag as latest
                            sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ${DOCKER_IMAGE_NAME}:${LATEST_TAG}"
                            
                            echo "Docker image built successfully: ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                            
                            // Store image reference for later stages
                            env.DOCKER_IMAGE_BUILT = "true"
                        } catch (Exception e) {
                            echo "Docker build failed: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Test Docker Image') {
            when {
                environment name: 'DOCKER_IMAGE_BUILT', value: 'true'
            }
            steps {
                echo 'Testing Docker image...'
                script {
                    sh '''
                        echo "Starting container test..."
                        # Run container in detached mode
                        docker run -d --name ai-notes-test-${BUILD_NUMBER} -p 8081:80 ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                        
                        # Wait for container to start
                        echo "Waiting for container to start..."
                        sleep 15
                        
                        # Test if container is running
                        echo "Checking if container is running:"
                        docker ps | grep ai-notes-test-${BUILD_NUMBER}
                        
                        # Optional: Test HTTP response
                        echo "Testing HTTP response:"
                        curl -f http://localhost:8081 || echo "HTTP test failed, but continuing..."
                        
                        # Cleanup test container
                        echo "Cleaning up test container..."
                        docker stop ai-notes-test-${BUILD_NUMBER} || true
                        docker rm ai-notes-test-${BUILD_NUMBER} || true
                    '''
                }
            }
        }
        
        stage('Docker Hub Login') {
            when {
                environment name: 'DOCKER_IMAGE_BUILT', value: 'true'
            }
            steps {
                echo 'Logging into Docker Hub...'
                script {
                    // Using Docker Hub credentials stored in Jenkins
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                   usernameVariable: 'DOCKER_USERNAME', 
                                                   passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            echo "Logging into Docker Hub as ${DOCKER_USERNAME}..."
                            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                            echo "Docker Hub login successful!"
                        '''
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            when {
                environment name: 'DOCKER_IMAGE_BUILT', value: 'true'
            }
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    try {
                        sh '''
                            echo "Pushing image with build number tag..."
                            docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                            
                            echo "Pushing latest tag..."
                            docker push ${DOCKER_IMAGE_NAME}:${LATEST_TAG}
                            
                            echo "Successfully pushed both tags to Docker Hub!"
                            echo "Image: ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                            echo "Latest: ${DOCKER_IMAGE_NAME}:${LATEST_TAG}"
                        '''
                    } catch (Exception e) {
                        echo "Docker push failed: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }
        
        
        
        stage('Deploy Notification') {
            when {
                environment name: 'DOCKER_IMAGE_BUILT', value: 'true'
            }
            steps {
                echo 'Deployment ready notification...'
                script {
                    sh '''
                        echo "üöÄ DEPLOYMENT READY!"
                        echo "================================"
                        echo "Docker Image: ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                        echo "Latest Tag: ${DOCKER_IMAGE_NAME}:${LATEST_TAG}"
                        echo "Build Number: ${BUILD_NUMBER}"
                        echo "Branch: ${BRANCH_NAME}"
                        echo "================================"
                        echo "To deploy, run:"
                        echo "docker run -d -p 3000:80 ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                        echo "or"
                        echo "docker-compose up -d"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'Cleaning up...'
                try {
                    // Clean up Docker images to save space (keep recent ones)
                    sh '''
                        echo "Cleaning up old Docker images..."
                        docker image prune -f || true
                        
                        # Clean up any remaining test containers
                        echo "Cleaning up any remaining test containers..."
                        docker ps -a | grep ai-notes-test | awk '{print $1}' | xargs docker rm -f || true
                        
                        # Logout from Docker Hub if still logged in
                        docker logout || true
                    '''
                } catch (Exception e) {
                    echo "Cleanup failed: ${e.getMessage()}"
                }
            }
        }
        
        success {
            echo 'Pipeline completed successfully!'
            echo "‚úÖ Build ${BUILD_NUMBER} completed successfully"
            echo "üê≥ Docker image pushed: ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
            echo "üîó Docker Hub: https://hub.docker.com/r/debabrata013/ai-notes-web"
            
            // Send success notification (you can add Slack/email here)
            script {
                sh '''
                    echo "SUCCESS SUMMARY:"
                    echo "================"
                    echo "‚úÖ Source code checked out"
                    echo "‚úÖ Dependencies installed"
                    echo "‚úÖ React app built"
                    echo "‚úÖ Docker image created"
                    echo "‚úÖ Image tested"
                    echo "‚úÖ Pushed to Docker Hub"
                    echo "üéâ Ready for deployment!"
                '''
            }
        }
        
        failure {
            echo 'Pipeline failed!'
            echo "‚ùå Build ${BUILD_NUMBER} failed"
            
            // Debug information on failure
            script {
                try {
                    sh '''
                        echo "=== FAILURE DEBUG INFO ==="
                        echo "PATH: $PATH"
                        echo "Node location: $(which node || echo 'not found')"
                        echo "NPM location: $(which npm || echo 'not found')"
                        echo "Docker containers:"
                        docker ps -a | grep ai-notes || echo "No ai-notes containers"
                        echo "Docker images:"
                        docker images | grep ai-notes || echo "No ai-notes images"
                        echo "Docker Hub login status:"
                        docker info | grep Username || echo "Not logged into Docker Hub"
                    '''
                } catch (Exception e) {
                    echo "Debug info collection failed: ${e.getMessage()}"
                }
            }
        }
        
        unstable {
            echo 'Pipeline completed with warnings!'
            echo "‚ö†Ô∏è Build ${BUILD_NUMBER} completed with warnings"
        }
    }
}
